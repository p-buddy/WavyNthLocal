const e=({phaseDegrees:e,...a},r)=>({...a,phaseDegrees:e+r}),a=(a,...r)=>{const s=[...a.waves];return r.forEach((([a,r])=>{return s[a]=(n=s[a],t=({animationCurve:a,value:s})=>({animationCurve:a,value:e(s,r)}),i=a=>e(a,r),"animationCurve"in n?t(n):i(n));var n,t,i})),{...a,waves:s}},r={duration:2,projectionType:1,sampleRate:1e3,signalLength:4,thickness:.1,waves:[{frequency:5,amplitude:2,waveType:1,phaseDegrees:0,displacementAxis:{x:0,y:1,z:0}},{frequency:2,amplitude:2,waveType:1,phaseDegrees:0,displacementAxis:{x:1,y:0,z:0}},{frequency:5,amplitude:2,waveType:4,phaseDegrees:0,displacementAxis:{x:1,y:0,z:0}},{frequency:2,amplitude:1,waveType:1,phaseDegrees:0,displacementAxis:{x:1,y:1,z:0}}]},s=new class{internal;constructor(e,...a){this.internal=make_Signal(...arguments)}addFrame(e){this.internal.AddFrame(convertTo_KeyFrame(e))}addFrames(...e){this.internal.AddFrames(convertTo_KeyFrames(e))}get frames(){return wrap(this.internal.Frames)}set frames(e){this.internal.Frames=convertTo_List_1(e)}}(1,r),n=a(r,[1,90]);s.addFrame(n);const t=a(n,[2,100]);s.addFrame(t),s.addFrame(a(t,[0,200],[2,100])),((e,a)=>{internalize_play(e,a)})(s,0);